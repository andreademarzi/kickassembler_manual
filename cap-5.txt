Capitolo 5. Branching and Looping

Kick Assembler ha direttive di controllo che ti consentono di stabilire le condizioni quando viene eseguita una direttiva e quante volte viene eseguita. Questi sono spiegati in questo capitolo.
5.1. Valori booleani

Le condizioni per le direttive di controllo sono date da valori booleani, che sono valori che possono essere veri o falsi. Sono generati e utilizzati come nei linguaggi di programmazione come Java e C #. I seguenti sono esempi di variabili booleane: 

.var  myBoolean1 = true          // Set the variable to true
.va  rmyBoolean2 = false         // Set the variable to false
.var  fourHigherThanFive = 4>5   // Sets fourHigherThanFive = false
.var  aEqualsB = a==b            // Sets true if a is the same as b
.var  xNot10 = x!=10             // Sets true if x doesn’t equal 10


Ecco il set standard di operatori per la generazione di booleani:

Tabella 5.1 Funzioni generatrici booleane


Nome 	    Operatore 	        Esempio                 	Descrizione
Pari 	        == 	             a == b 	            Restituisce vero se a è uguale a b, altrimenti falso. 

Non uguale 	    ! = 	         a! = b              	Restituisce vero se a non è uguale a b, altrimenti falso.

Maggiore 	    > 	             A> B 	                Restituisce vero se a è maggiore di b, altrimenti falso.

Di meno 	    < 	             a <b                	Restituisce vero se a è minore di b, altrimenti falso.

Più grande di 	> = 	         a> = b 	            Restituisce vero se a è maggiore o uguale a b, altrimenti falso.

Meno di 	    <= 	             un <= b 	            Restituisce vero se a è minore o uguale a b, altrimenti falso.


Tutti gli operatori sono definiti per valori numerici, altri valori hanno definito un sottoinsieme di quanto sopra. Ad esempio, non puoi dire che un booleano sia maggiore di un altro, ma puoi vedere se hanno gli stessi valori: 

.var b1 = true==true      // Sets b1 to true
.var b2 = true!=(10<20)   // Sets b2 to false

Ai valori booleani è assegnato un set di operatori. Questi sono i seguenti:

Tabella 5.2 Operatori booleani
  
Name          Operator           Example                    Description
Not             !                   !a                   Restituisce vero se a è falso, altrimenti falso.

And             &&                  a&&b                 Restituisce vero se a e b sono veri, altrimenti falso.

Or              ||                  A||b                 Restituisce vero se a o b sono veri, altrimenti falso
  
E sono usati in questo modo:

.var allTrue = 10HigherThan100 && aEqualsB // Is true if the two boolean // arguments are true.

Come in linguaggi come C ++ o Java, && e || gli operatori sono in corto circuito. Ciò significa che se il primo argomento di un operatore && è falso, il secondo argomento non verrà valutato poiché il risultato può essere solo falso. Lo stesso accade se il primo argomento di un || l'operatore è vero. 





5.2. La direttiva .if

Le direttive If funzionano come nei linguaggi di programmazione standard. Con una direttiva .if hai la direttiva procedente eseguita solo se una determinata espressione booleana viene valutata come vera. Ecco alcuni esempi: 

// Set x to 10 if x is higher that 10
.if (x>10) .eval x=10
// Only show rastertime if the ‘showRasterTime’ boolean is true
.var showRasterTime = false
.if (showRasterTime) inc $d020
jsr PlayMusic
.if (showRasterTime) dec $d020

Puoi raggruppare più istruzioni in un blocco con {…} e farle eseguire insieme se l'espressione booleana è vera:

// If IrqNr is 3 then play the music
.if (irqNr==3) {
    inc $d020
    jsr music+3
    dec $d020
}

Aggiungendo un'istruzione else è possibile eseguire un'espressione se l'espressione booleana è falsa: 

// Add the x’th entry of a table if x is positive or
// subtract it if x is negative
.if (x>=0) adc zpXtable+x else sbc zpXtable+abs(x) 


// Init an offset table or display a warning if the table length is exceeded
.if (i<tableLength) {
     lda #0
     sta offset1+i
     sta offset2+i
} else {
     .error "Error!! I is too high!"
}






5.3. Punto interrogativo se è

Come noto da linguaggi come Java e C ++, è possibile utilizzare la scrittura compatta se espressione nella seguente forma:

condition ? trueExpr : falseExpr

Alcuni esempi di utilizzo:

.var x= true ? "hello" : "goodbye"// Sets x = "hello"
.var y= [20<10] ? 1 : 2           // Sets y=2 

.var max = a>b ? a:b

.var debug=true
inc debug ? $d020:$d013                         // Increases $d020 since debug=true
.var boolean = max(x,minLimit==null?0:minLimit) // Takes care of null limit





5.4. La direttiva .for

Con la direttiva .for puoi generare loop come nei moderni linguaggi di programmazione. La direttiva .for accetta un elenco di espressioni init, un'espressione booleana e un elenco di iterazioni separati da un punto e virgola. Gli ultimi due argomenti e il corpo vengono eseguiti finché l'espressione booleana viene valutata vera. 

// Prints the numbers from 0 to 9
.for(var i=0;i<10;i++) .print "Number " + i 

// Make data for a sine wave
.for(var i=0;i<256;i++) .byte round(127.5+127.5*sin(toRadians(360*i/256)))

Poiché gli argomenti 1 e 3 sono elenchi, è possibile lasciarli fuori oppure è possibile scrivere diverse espressioni separate da virgola: 

// Print the numbers from 0 to 9
.var i=0
.for (;i<10;) {
        .print i
        .eval i++
}
// Sum the numbers from 0 to 9 and print the sum at each step
.for(var i=0, var sum=0;i<10;sum=sum+i,i++)
         .print “The sum at step “ + I “ is “ + sum

Con il ciclo for puoi generare rapidamente tabelle e srotolare i loop. Ad esempio, puoi fare una classica routine di "riempimento blitter" come questa: 

.var blitterBuffer=$3000
.var charset=$3800
.for (x=0;x<16;x++) {
      .for(var y=0;y<128;y++) {
           if (var y=0) lda blitterBuffer+x*128+y
           else eor blitterBuffer+x*128+y
           sta charset+x*128+y
       }
}






5.5. La direttiva .while

La direttiva .while viene eseguita fintanto che una determinata espressione è vera. Cioè, funziona come un .for-loop ma senza i parametri init e iterazione: 


// Print the numbers from 0 to 9
.var i=0
.while(i<10) {
      .print i;
      .eval i++;
}







5.6. Considerazioni sull'ottimizzazione quando si utilizzano i loop

Ecco un suggerimento se si desidera ottimizzare l'assemblaggio. Kick assemblatore ha due modalità di esecuzione delle direttive. La "Modalità funzione" viene utilizzata quando la direttiva viene inserita in una funzione o la definisce, altrimenti viene utilizzata la "Modalità asm". La "Modalità funzione" viene eseguita rapidamente ma è limitata ai soli comandi di script (.var, .const, .for, ecc.), Mentre la "Modalità asm" ricorda i risultati intermedi in modo che l'assemblatore non debba effettuare gli stessi calcoli per riuscire passa.

Se si eseguono calcoli pesanti e si ottengono prestazioni lente o mancanza di memoria, posizionare i propri loop all'interno di una direttiva di definizione o all'interno di una funzione. Nessun tempo o memoria sarà sprecato per registrare risultati intermedi e la direttiva di definizione o la direttiva che ha chiamato la funzione ricorderà il risultato nei passaggi successivi.

Maggiori informazioni sulla direttiva define nella sezione 'Lavorare con valori mutabili'. 

































